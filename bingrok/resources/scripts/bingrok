#!/usr/bin/env python3.4

import sys
import os.path
app_path = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..'))
sys.path.insert(0, app_path)

import logging
import argparse
import struct

import bingrok.config.log
import bingrok.utility

_DEFAULT_LENGTH = 16

_LOGGER = logging.getLogger(__name__)

def _get_args():
    p = argparse.ArgumentParser()

    p.add_argument(
        'filepath',
        help='File-path')

    p.add_argument(
        '-o', '--offset',
        default=0,
        type=int,
        help='Offset (defaults to 0)')

    p.add_argument(
        '-l', '--length',
        default=0,
        type=int,
        help="Length (defaults to {}; if an unpack format is given, defaults to minimum required length)".format(_DEFAULT_LENGTH))

    p.add_argument(
        '-f', '--unpack-format',
        help="Unpack format")

    p.add_argument(
        '-pui', '--print-unpacked-inline',
        action='store_true',
        help="If unpacking, print in one line")

    p.add_argument(
        '-j', '--json',
        action='store_true',
        help="Print as JSON")

    p.add_argument(
        '-v', '--verbose',
        action='store_true',
        help="Enable verbosity")

    args = p.parse_args()
    return args

def _main():
    args = _get_args()
    bingrok.config.log.configure(is_debug=args.verbose)

    length = args.length
    unpack_format = args.unpack_format
    if length == 0:
        if unpack_format is not None:
            length = bingrok.utility.get_unpack_format_size(unpack_format)
            _LOGGER.debug("Unpack-format requires ({}) bytes.".format(length))
        else:
            length = _DEFAULT_LENGTH

    with open(args.filepath, 'rb') as f:
        buffer_ = \
            bingrok.utility.get_slice(
                f, args.offset, length=length, unpack_format=args.unpack_format)

        _LOGGER.debug("Extracted ({}) bytes.".format(len(buffer_)))

        if args.unpack_format is not None:
            # We'll condition some values for readability unless we want to
            # return JSON.
            do_make_nicer = args.json is False

            unpack_info = \
                bingrok.utility.unpack_buffer(
                    buffer_,
                    args.unpack_format,
                    do_make_nicer=do_make_nicer)

            bingrok.utility.print_unpacked(
                args.offset,
                unpack_info,
                do_inline=args.print_unpacked_inline,
                do_json=args.json)
        elif args.json is True:
            print(bingrok.utility.get_pretty_json([ord(c) for c in buffer_]))
        else:
            bingrok.utility.print_bytes(args.offset, buffer_)

if __name__ == '__main__':
    _main()
